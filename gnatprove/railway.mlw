(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float 
 
 function first 
   :real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last 
   :real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  255
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  65535
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing The array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   :int =
  1
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int

 type component_type  = 
  Standard__character.character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string  = 
  __t
 
 function to_string 
   (x : Main.__image)  :string
 
 function from_string 
   (x : string)  :Main.__image
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function first 
   :Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   :Main.__fixed =
  9223372036854775807
 
 function inv_small 
   :Main.__fixed =
  1000000000
 
 predicate in_range
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "one_signal_state" defined at railway.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int

 type one_signal_state 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  1
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = one_signal_state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "route_type" defined at railway.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Railway__route_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type route_type 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  7
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = route_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "one_segment_state" defined at railway.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_segment_state
 use import "_gnatprove_standard".Main
 use import "int".Int

 type one_segment_state 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  5
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = one_segment_state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "segment_state_type" defined at railway.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Railway__segment_state_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_segment_state

 type __split_fields  = 
  { rec__left : Railway__one_segment_state.one_segment_state; rec__middle : Railway__one_segment_state.one_segment_state; rec__right : Railway__one_segment_state.one_segment_state }
 
 type segment_state_type  = 
  { __split_fields : __split_fields }
 
 predicate left__pred
   (a : segment_state_type)  =
  true
 
 val rec__left_ 
   (a : segment_state_type)  :Railway__one_segment_state.one_segment_state
  requires { (left__pred a) }
  ensures { (result = a.__split_fields.rec__left) }

 
 predicate middle__pred
   (a : segment_state_type)  =
  true
 
 val rec__middle_ 
   (a : segment_state_type)  :Railway__one_segment_state.one_segment_state
  requires { (middle__pred a) }
  ensures { (result = a.__split_fields.rec__middle) }

 
 predicate right__pred
   (a : segment_state_type)  =
  true
 
 val rec__right_ 
   (a : segment_state_type)  :Railway__one_segment_state.one_segment_state
  requires { (right__pred a) }
  ensures { (result = a.__split_fields.rec__right) }

 
 function bool_eq 
   (a : segment_state_type) (b : segment_state_type)  :bool =
  (if (( ( ((Railway__one_segment_state.to_rep a.__split_fields.rec__left) = (Railway__one_segment_state.to_rep b.__split_fields.rec__left)) /\ ((Railway__one_segment_state.to_rep a.__split_fields.rec__middle) = (Railway__one_segment_state.to_rep b.__split_fields.rec__middle)) ) /\ ((Railway__one_segment_state.to_rep a.__split_fields.rec__right) = (Railway__one_segment_state.to_rep b.__split_fields.rec__right)) )) then (
   True) else (
   False))
 
 function user_eq 
   (a : segment_state_type) (b : segment_state_type)  :bool
 
 function value__size 
   :int
 
 function object__size 
   (a : segment_state_type)  :int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a  : segment_state_type.
   ((object__size a) >= 0))
 
 function dummy 
   :segment_state_type

end

(* Module for axiomatizing type "signal_state_type" defined at railway.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Railway__signal_state_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state

 type __split_fields  = 
  { rec__left_middle : Railway__one_signal_state.one_signal_state; rec__middle_left : Railway__one_signal_state.one_signal_state; rec__middle_right : Railway__one_signal_state.one_signal_state; rec__right_middle : Railway__one_signal_state.one_signal_state }
 
 type signal_state_type  = 
  { __split_fields : __split_fields }
 
 predicate left_middle__pred
   (a : signal_state_type)  =
  true
 
 val rec__left_middle_ 
   (a : signal_state_type)  :Railway__one_signal_state.one_signal_state
  requires { (left_middle__pred a) }
  ensures { (result = a.__split_fields.rec__left_middle) }

 
 predicate middle_left__pred
   (a : signal_state_type)  =
  true
 
 val rec__middle_left_ 
   (a : signal_state_type)  :Railway__one_signal_state.one_signal_state
  requires { (middle_left__pred a) }
  ensures { (result = a.__split_fields.rec__middle_left) }

 
 predicate middle_right__pred
   (a : signal_state_type)  =
  true
 
 val rec__middle_right_ 
   (a : signal_state_type)  :Railway__one_signal_state.one_signal_state
  requires { (middle_right__pred a) }
  ensures { (result = a.__split_fields.rec__middle_right) }

 
 predicate right_middle__pred
   (a : signal_state_type)  =
  true
 
 val rec__right_middle_ 
   (a : signal_state_type)  :Railway__one_signal_state.one_signal_state
  requires { (right_middle__pred a) }
  ensures { (result = a.__split_fields.rec__right_middle) }

 
 function bool_eq 
   (a : signal_state_type) (b : signal_state_type)  :bool =
  (if (( ( ( ((Railway__one_signal_state.to_rep a.__split_fields.rec__left_middle) = (Railway__one_signal_state.to_rep b.__split_fields.rec__left_middle)) /\ ((Railway__one_signal_state.to_rep a.__split_fields.rec__middle_left) = (Railway__one_signal_state.to_rep b.__split_fields.rec__middle_left)) ) /\ ((Railway__one_signal_state.to_rep a.__split_fields.rec__middle_right) = (Railway__one_signal_state.to_rep b.__split_fields.rec__middle_right)) ) /\ ((Railway__one_signal_state.to_rep a.__split_fields.rec__right_middle) = (Railway__one_signal_state.to_rep b.__split_fields.rec__right_middle)) )) then (
   True) else (
   False))
 
 function user_eq 
   (a : signal_state_type) (b : signal_state_type)  :bool
 
 function value__size 
   :int
 
 function object__size 
   (a : signal_state_type)  :int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a  : signal_state_type.
   ((object__size a) >= 0))
 
 function dummy 
   :signal_state_type

end

(* Module for defining the constant "route" defined at railway.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Railway__open_route__route
 use import "_gnatprove_standard".Main
 use        Railway__route_type

 function route "GP_CE_Relevant" 
   :Railway__route_type.__split

end

(* Module giving an empty axiom for the entity "route" defined at railway.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__open_route__route__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "route" defined at railway.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module Railway__move_train__route
 use import "_gnatprove_standard".Main
 use        Railway__route_type

 function route "GP_CE_Relevant" 
   :Railway__route_type.__split

end

(* Module giving an empty axiom for the entity "route" defined at railway.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__move_train__route__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "route" defined at railway.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Railway__train__route
 use import "_gnatprove_standard".Main
 use        Railway__route_type

 function route "GP_CE_Relevant" 
   :Railway__route_type.__split

end

(* Module giving an empty axiom for the entity "route" defined at railway.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__train__route__axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining a ref holding the value of variable "segment_state" defined at railway.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__segment_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type

 val segment_state__split_fields  : ref Railway__segment_state_type.__split_fields
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "segment_state" defined at railway.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__segment_state__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "signal_state" defined at railway.ads:37, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__signal_state_type

 val signal_state__split_fields  : ref Railway__signal_state_type.__split_fields
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "signal_state" defined at railway.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__signal_state__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "success" defined at railway.ads:68, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__open_route__success
 use import "_gnatprove_standard".Main

 val success "GP_CE_Relevant"  : ref bool
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "success" defined at railway.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__open_route__success__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "success" defined at railway.ads:76, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__move_train__success
 use import "_gnatprove_standard".Main

 val success "GP_CE_Relevant"  : ref bool
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "success" defined at railway.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__move_train__success__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "retval" defined at railway.ads:85, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__train__retval
 use import "_gnatprove_standard".Main

 val retval "GP_CE_Relevant"  : ref bool
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "retval" defined at railway.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__train__retval__axiom
 use import "_gnatprove_standard".Main


end
(* Module for possibly declaring a logic function for "correct_signals" defined at railway.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__correct_signals
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type

 function correct_signals 
   (railway__segment_state : Railway__segment_state_type.segment_state_type) (railway__signal_state : Railway__signal_state_type.signal_state_type)  :bool

end

(* Module for possibly declaring a logic function for "correct_segments" defined at railway.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__correct_segments
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type

 function correct_segments 
   (railway__segment_state : Railway__segment_state_type.segment_state_type) (railway__signal_state : Railway__signal_state_type.signal_state_type)  :bool

end

(* Module for possibly declaring a logic function for "open_route" defined at railway.ads:68, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__open_route
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "move_train" defined at railway.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__move_train
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "train" defined at railway.ads:85, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__train
 use import "_gnatprove_standard".Main


end

(* Module giving a program function and a defining axiom for the expression function "correct_signals" defined at railway.ads:39, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Railway__correct_signals__axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_signals

 val correct_signals 
   (__void_param : unit)  :bool
  requires { true }
  ensures { (result = (Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })) }

 
 axiom correct_signals__def_axiom :
  (forall railway__segment_state  : Railway__segment_state_type.segment_state_type.
  (forall railway__signal_state  : Railway__signal_state_type.signal_state_type [(Railway__correct_signals.correct_signals railway__segment_state railway__signal_state)].
   ( ((Railway__correct_signals.correct_signals railway__segment_state railway__signal_state) = True) <-> ( ( ( (if (((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__left_middle (Railway__signal_state_type.__split_fields railway__signal_state))) = 1)) then (
    ( ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__left (Railway__segment_state_type.__split_fields railway__segment_state))) = 2) /\ ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) = 3) )) else (
    true)) /\ (if (((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__middle_left (Railway__signal_state_type.__split_fields railway__signal_state))) = 1)) then (
    ( ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) = 1) /\ ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__left (Railway__segment_state_type.__split_fields railway__segment_state))) = 4) )) else (
    true)) ) /\ (if (((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__middle_right (Railway__signal_state_type.__split_fields railway__signal_state))) = 1)) then (
    ( ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) = 2) /\ ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__right (Railway__segment_state_type.__split_fields railway__segment_state))) = 3) )) else (
    true)) ) /\ (if (((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__right_middle (Railway__signal_state_type.__split_fields railway__signal_state))) = 1)) then (
    ( ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__right (Railway__segment_state_type.__split_fields railway__segment_state))) = 1) /\ ((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) = 4) )) else (
    true)) ) )))

end

(* Module giving a program function and a defining axiom for the expression function "correct_segments" defined at railway.ads:55, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Railway__correct_segments__axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_segments

 val correct_segments 
   (__void_param : unit)  :bool
  requires { true }
  ensures { (result = (Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })) }

 
 axiom correct_segments__def_axiom :
  (forall railway__segment_state  : Railway__segment_state_type.segment_state_type.
  (forall railway__signal_state  : Railway__signal_state_type.signal_state_type [(Railway__correct_segments.correct_segments railway__segment_state railway__signal_state)].
   ( ((Railway__correct_segments.correct_segments railway__segment_state railway__signal_state) = True) <-> ( ( ( (if (((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__left (Railway__segment_state_type.__split_fields railway__segment_state))) <> 4)) then (
    ((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__middle_left (Railway__signal_state_type.__split_fields railway__signal_state))) = 0)) else (
    true)) /\ (if (((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) <> 3)) then (
    ((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__left_middle (Railway__signal_state_type.__split_fields railway__signal_state))) = 0)) else (
    true)) ) /\ (if (((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__middle (Railway__segment_state_type.__split_fields railway__segment_state))) <> 4)) then (
    ((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__right_middle (Railway__signal_state_type.__split_fields railway__signal_state))) = 0)) else (
    true)) ) /\ (if (((Railway__one_segment_state.to_rep (Railway__segment_state_type.rec__right (Railway__segment_state_type.__split_fields railway__segment_state))) <> 3)) then (
    ((Railway__one_signal_state.to_rep (Railway__signal_state_type.rec__middle_right (Railway__signal_state_type.__split_fields railway__signal_state))) = 0)) else (
    true)) ) )))

end
(* Module giving axioms for the type entity "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "one_signal_state" defined at railway.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__one_signal_state__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "route_type" defined at railway.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__route_type__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "one_segment_state" defined at railway.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__one_segment_state__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "segment_state_type" defined at railway.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__segment_state_type__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "signal_state_type" defined at railway.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__signal_state_type__axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "open_route" defined at railway.ads:68, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Railway__open_route__axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_signals
 use        Railway__correct_segments

 val open_route 
   (route : int) (success : ref bool)  :unit
  requires { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) }
  ensures { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields }
  writes {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields, success }


end

(* Module for declaring a program function (and possibly an axiom) for "move_train" defined at railway.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Railway__move_train__axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_signals
 use        Railway__correct_segments

 val move_train 
   (route : int) (success : ref bool)  :unit
  requires { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) }
  ensures { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields }
  writes {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields, success }


end

(* Module for declaring a program function (and possibly an axiom) for "train" defined at railway.ads:85, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Railway__train__axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state
 use        Railway__signal_state

 val train 
   (route : int) (retval : ref bool)  :unit
  requires { true }
  ensures { true }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields }
  writes {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields, retval }


end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "railway" defined at railway.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Railway__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom

 let def "GP_Subp:railway.ads:1" "W:diverges:N" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( (let railway__segment_state__assume = { Railway__segment_state_type.__split_fields = { Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(5)); Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(5)); Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(5)) } } in (
   Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(railway__segment_state__assume)) )))
  ;
  (let railway__signal_state__assume = { Railway__signal_state_type.__split_fields = { Railway__signal_state_type.rec__left_middle = (Railway__one_signal_state.of_rep(0)); Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(0)); Railway__signal_state_type.rec__middle_right = (Railway__one_signal_state.of_rep(0)); Railway__signal_state_type.rec__right_middle = (Railway__one_signal_state.of_rep(0)) } } in (
   Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(railway__signal_state__assume)) )))
  ;
  ( "GP_Sloc:railway.adb:184:1" () ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "correct_signals" defined at railway.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__correct_signals__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom

 val railway__correct_signals__result "\"GP_Ada_Name:Correct_Signals'Result\""  : ref bool
 
 let def "W:diverges:N" "GP_Subp:railway.ads:39" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( () (* Assume dynamic property of params of the subprogram railway.ads:39 *)
  ;
  ( () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:39 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram railway.ads:39 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram railway.ads:39 *)
  ;
  () (* Body of the subprogram railway.ads:39 *)
  ;
  try
   ( ( "GP_Sloc:railway.ads:50:66" ( railway__correct_signals__result := ( ( ( ( (if (((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__left_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 2)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 3)))) else (
    (Boolean.of_int(1)))) && (if (((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 1)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 4)))) else (
    (Boolean.of_int(1)))) ) && (if (((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 2)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 3)))) else (
    (Boolean.of_int(1)))) ) && (if (((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__right_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 1)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 4)))) else (
    (Boolean.of_int(1)))) ) );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram railway.ads:39 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  !railway__correct_signals__result ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "correct_segments" defined at railway.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__correct_segments__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom

 val railway__correct_segments__result "\"GP_Ada_Name:Correct_Segments'Result\""  : ref bool
 
 let def "W:diverges:N" "GP_Subp:railway.ads:55" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( () (* Assume dynamic property of params of the subprogram railway.ads:55 *)
  ;
  ( () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:55 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram railway.ads:55 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram railway.ads:55 *)
  ;
  () (* Body of the subprogram railway.ads:55 *)
  ;
  try
   ( ( "GP_Sloc:railway.ads:63:48" ( railway__correct_segments__result := ( (Boolean.andb((Boolean.andb((Boolean.andb((if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) <> 4)) then (
    ((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 0)) else (
    (Boolean.of_int(1))))) ((if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) <> 3)) then (
    ((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__left_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 0)) else (
    (Boolean.of_int(1))))))) ((if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) <> 4)) then (
    ((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__right_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 0)) else (
    (Boolean.of_int(1))))))) ((if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) <> 3)) then (
    ((Railway__one_signal_state.to_rep((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields })))))) = 0)) else (
    (Boolean.of_int(1)))))) );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram railway.ads:55 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  !railway__correct_segments__result ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "open_route" defined at railway.ads:68, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__open_route__subprogram_def
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__route_type
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_signals
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments
 use        Railway__correct_segments__axiom
 use        Railway__open_route__route
 use        Railway__open_route__success
 use        Railway__one_signal_state__axiom
 use        Railway__route_type__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments__axiom
 use        Railway__open_route__route__axiom
 use        Railway__open_route__success__axiom

 let def "W:diverges:N" "GP_Subp:railway.ads:68" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Sloc:railway.ads:74:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:       Post => Correct_Signals and Correct_Segments;
               ^ railway.ads:74:16:VC_POSTCONDITION" "GP_Shape:pragargs__and" "keep_on_simp" ( ( "GP_Pretty_Ada:3378" "GP_Sloc:railway.ads:74:16" ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) /\ ( "GP_Pretty_Ada:3379" "GP_Sloc:railway.ads:74:36" ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram railway.ads:68 *)
  ;
  assume { (Railway__route_type.dynamic_property Railway__route_type.first Railway__route_type.last Railway__open_route__route.route) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:68 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:68 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Railway__correct_signals__axiom.correct_signals(()))) ((Railway__correct_segments__axiom.correct_segments(())))))) end ;
  () (* Assume Pre of the subprogram railway.ads:68 *)
  ;
  assume { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) } );
  ( () (* Check additional Pres of the subprogram railway.ads:68 *)
  ;
  () (* Body of the subprogram railway.ads:68 *)
  ;
  try
   ( ( "GP_Sloc:railway.adb:14:7" (if ((Railway__open_route__route.route = 4)) then (
    ( "GP_Sloc:railway.adb:16:12" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) then (
     ( ( "GP_Sloc:railway.adb:17:35" (let temp___standard__railway_1 = (let temp___standard__railway_0 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_0)))))) end ;
      { ( temp___standard__railway_0 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_0)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(3)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_1)) )))
      );
     ( "GP_Sloc:railway.adb:18:41" (let temp___standard__railway_3 = (let temp___standard__railway_2 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields(temp___standard__railway_2)))))) end ;
      { ( temp___standard__railway_2 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_2)) ) with Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_3)) )))
      );
     ( "GP_Sloc:railway.adb:19:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:21:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) )) else if ((Railway__open_route__route.route = 6)) then (
    ( "GP_Sloc:railway.adb:24:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) then (
     ( ( "GP_Sloc:railway.adb:25:36" (let temp___standard__railway_5 = (let temp___standard__railway_4 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_4)))))) end ;
      { ( temp___standard__railway_4 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_4)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(4)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_5)) )))
      );
     ( "GP_Sloc:railway.adb:26:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:28:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 7)) then (
    ( "GP_Sloc:railway.adb:31:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)) then (
     ( ( "GP_Sloc:railway.adb:33:35" (let temp___standard__railway_7 = (let temp___standard__railway_6 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_6)))))) end ;
      { ( temp___standard__railway_6 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_6)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(1)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_7)) )))
      );
     ( "GP_Sloc:railway.adb:34:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:36:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 5)) then (
    ( "GP_Sloc:railway.adb:39:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)) then (
     ( ( "GP_Sloc:railway.adb:40:36" (let temp___standard__railway_9 = (let temp___standard__railway_8 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_8)))))) end ;
      { ( temp___standard__railway_8 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_8)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(2)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_9)) )))
      );
     ( "GP_Sloc:railway.adb:41:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:43:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 0)) then (
    ( "GP_Sloc:railway.adb:46:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)))) then (
     ( ( "GP_Sloc:railway.adb:47:37" (let temp___standard__railway_11 = (let temp___standard__railway_10 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_10)))))) end ;
      { ( temp___standard__railway_10 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_10)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(3)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_11)) )))
      );
     ( "GP_Sloc:railway.adb:48:41" (let temp___standard__railway_13 = (let temp___standard__railway_12 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__left_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_12)))))) end ;
      { ( temp___standard__railway_12 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_12)) ) with Railway__signal_state_type.rec__left_middle = (Railway__one_signal_state.of_rep(1)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_13)) )))
      );
     ( "GP_Sloc:railway.adb:49:35" (let temp___standard__railway_15 = (let temp___standard__railway_14 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_14)))))) end ;
      { ( temp___standard__railway_14 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_14)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(2)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_15)) )))
      );
     ( "GP_Sloc:railway.adb:50:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:52:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 3)) then (
    ( "GP_Sloc:railway.adb:55:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)))) then (
     ( ( "GP_Sloc:railway.adb:56:35" (let temp___standard__railway_17 = (let temp___standard__railway_16 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_16)))))) end ;
      { ( temp___standard__railway_16 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_16)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(4)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_17)) )))
      );
     ( "GP_Sloc:railway.adb:57:41" (let temp___standard__railway_19 = (let temp___standard__railway_18 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields(temp___standard__railway_18)))))) end ;
      { ( temp___standard__railway_18 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_18)) ) with Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(1)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_19)) )))
      );
     ( "GP_Sloc:railway.adb:58:37" (let temp___standard__railway_21 = (let temp___standard__railway_20 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_20)))))) end ;
      { ( temp___standard__railway_20 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_20)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(1)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_21)) )))
      );
     ( "GP_Sloc:railway.adb:59:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:61:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 1)) then (
    ( "GP_Sloc:railway.adb:64:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)))) then (
     ( ( "GP_Sloc:railway.adb:65:41" (let temp___standard__railway_23 = (let temp___standard__railway_22 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields(temp___standard__railway_22)))))) end ;
      { ( temp___standard__railway_22 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_22)) ) with Railway__signal_state_type.rec__middle_right = (Railway__one_signal_state.of_rep(1)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_23)) )))
      );
     ( "GP_Sloc:railway.adb:66:37" (let temp___standard__railway_25 = (let temp___standard__railway_24 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_24)))))) end ;
      { ( temp___standard__railway_24 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_24)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(2)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_25)) )))
      );
     ( "GP_Sloc:railway.adb:67:36" (let temp___standard__railway_27 = (let temp___standard__railway_26 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_26)))))) end ;
      { ( temp___standard__railway_26 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_26)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(3)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_27)) )))
      );
     ( "GP_Sloc:railway.adb:68:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:70:23" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__open_route__route.route = 2)) then (
    ( "GP_Sloc:railway.adb:73:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 5)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 0)))) then (
     ( ( "GP_Sloc:railway.adb:74:42" (let temp___standard__railway_29 = (let temp___standard__railway_28 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__right_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_28)))))) end ;
      { ( temp___standard__railway_28 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_28)) ) with Railway__signal_state_type.rec__right_middle = (Railway__one_signal_state.of_rep(1)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_29)) )))
      );
     ( "GP_Sloc:railway.adb:75:36" (let temp___standard__railway_31 = (let temp___standard__railway_30 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_30)))))) end ;
      { ( temp___standard__railway_30 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_30)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(1)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_31)) )))
      );
     ( "GP_Sloc:railway.adb:76:37" (let temp___standard__railway_33 = (let temp___standard__railway_32 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_32)))))) end ;
      { ( temp___standard__railway_32 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_32)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(4)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_33)) )))
      );
     ( "GP_Sloc:railway.adb:77:23" Railway__open_route__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:79:24" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) )) else (
    ( "GP_Sloc:railway.adb:82:20" Railway__open_route__success.success := ( (Boolean.of_int(0)) ) ))) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram railway.ads:68 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Railway__correct_signals__axiom.correct_signals(()))) ((Railway__correct_segments__axiom.correct_segments(())))))) end  ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "move_train" defined at railway.ads:76, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__move_train__subprogram_def
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__route_type
 use        Railway__one_segment_state
 use        Railway__segment_state_type
 use        Railway__signal_state_type
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__correct_signals
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments
 use        Railway__correct_segments__axiom
 use        Railway__move_train__route
 use        Railway__move_train__success
 use        Railway__one_signal_state__axiom
 use        Railway__route_type__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments__axiom
 use        Railway__move_train__route__axiom
 use        Railway__move_train__success__axiom

 let def "W:diverges:N" "GP_Subp:railway.ads:76" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "keep_on_simp" "GP_Sloc:railway.ads:82:16" "GP_Id:1" "comment:       Post => Correct_Signals and Correct_Segments;
               ^ railway.ads:82:16:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3445" "GP_Sloc:railway.ads:82:16" ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) /\ ( "GP_Pretty_Ada:3446" "GP_Sloc:railway.ads:82:36" ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram railway.ads:76 *)
  ;
  assume { (Railway__route_type.dynamic_property Railway__route_type.first Railway__route_type.last Railway__move_train__route.route) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:76 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:76 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Railway__correct_signals__axiom.correct_signals(()))) ((Railway__correct_segments__axiom.correct_segments(())))))) end ;
  () (* Assume Pre of the subprogram railway.ads:76 *)
  ;
  assume { ( ((Railway__correct_signals.correct_signals { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) /\ ((Railway__correct_segments.correct_segments { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields }) = True) ) } );
  ( () (* Check additional Pres of the subprogram railway.ads:76 *)
  ;
  () (* Body of the subprogram railway.ads:76 *)
  ;
  try
   ( ( "GP_Sloc:railway.adb:91:9" (if ((Railway__move_train__route.route = 4)) then (
    ( "GP_Sloc:railway.adb:94:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 3)) then (
     ( ( "GP_Sloc:railway.adb:95:35" (let temp___standard__railway_35 = (let temp___standard__railway_34 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_34)))))) end ;
      { ( temp___standard__railway_34 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_34)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_35)) )))
      );
     ( "GP_Sloc:railway.adb:96:41" (let temp___standard__railway_37 = (let temp___standard__railway_36 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields(temp___standard__railway_36)))))) end ;
      { ( temp___standard__railway_36 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_36)) ) with Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_37)) )))
      );
     ( "GP_Sloc:railway.adb:97:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:99:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) )) else if ((Railway__move_train__route.route = 6)) then (
    ( "GP_Sloc:railway.adb:102:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 4)) then (
     ( ( "GP_Sloc:railway.adb:103:36" (let temp___standard__railway_39 = (let temp___standard__railway_38 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_38)))))) end ;
      { ( temp___standard__railway_38 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_38)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_39)) )))
      );
     ( "GP_Sloc:railway.adb:104:42" (let temp___standard__railway_41 = (let temp___standard__railway_40 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields(temp___standard__railway_40)))))) end ;
      { ( temp___standard__railway_40 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_40)) ) with Railway__signal_state_type.rec__middle_right = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_41)) )))
      );
     ( "GP_Sloc:railway.adb:105:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:107:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 7)) then (
    ( "GP_Sloc:railway.adb:110:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 1)) then (
     ( ( "GP_Sloc:railway.adb:111:35" (let temp___standard__railway_43 = (let temp___standard__railway_42 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_42)))))) end ;
      { ( temp___standard__railway_42 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_42)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_43)) )))
      );
     ( "GP_Sloc:railway.adb:112:41" (let temp___standard__railway_45 = (let temp___standard__railway_44 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields(temp___standard__railway_44)))))) end ;
      { ( temp___standard__railway_44 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_44)) ) with Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_45)) )))
      );
     ( "GP_Sloc:railway.adb:113:41" (let temp___standard__railway_47 = (let temp___standard__railway_46 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__left_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_46)))))) end ;
      { ( temp___standard__railway_46 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_46)) ) with Railway__signal_state_type.rec__left_middle = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_47)) )))
      );
     ( "GP_Sloc:railway.adb:114:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:116:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 5)) then (
    ( "GP_Sloc:railway.adb:119:13" (if (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 2)) then (
     ( ( "GP_Sloc:railway.adb:120:36" (let temp___standard__railway_49 = (let temp___standard__railway_48 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_48)))))) end ;
      { ( temp___standard__railway_48 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_48)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_49)) )))
      );
     ( "GP_Sloc:railway.adb:121:42" (let temp___standard__railway_51 = (let temp___standard__railway_50 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields(temp___standard__railway_50)))))) end ;
      { ( temp___standard__railway_50 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_50)) ) with Railway__signal_state_type.rec__middle_right = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_51)) )))
      );
     ( "GP_Sloc:railway.adb:122:42" (let temp___standard__railway_53 = (let temp___standard__railway_52 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__right_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_52)))))) end ;
      { ( temp___standard__railway_52 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_52)) ) with Railway__signal_state_type.rec__right_middle = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_53)) )))
      );
     ( "GP_Sloc:railway.adb:123:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:125:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 0)) then (
    ( "GP_Sloc:railway.adb:128:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 3)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 2)))) then (
     ( ( "GP_Sloc:railway.adb:130:37" (let temp___standard__railway_55 = (let temp___standard__railway_54 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_54)))))) end ;
      { ( temp___standard__railway_54 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_54)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_55)) )))
      );
     ( "GP_Sloc:railway.adb:131:41" (let temp___standard__railway_57 = (let temp___standard__railway_56 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__left_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_56)))))) end ;
      { ( temp___standard__railway_56 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_56)) ) with Railway__signal_state_type.rec__left_middle = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_57)) )))
      );
     ( "GP_Sloc:railway.adb:132:35" (let temp___standard__railway_59 = (let temp___standard__railway_58 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_58)))))) end ;
      { ( temp___standard__railway_58 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_58)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_59)) )))
      );
     ( "GP_Sloc:railway.adb:134:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:136:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 3)) then (
    ( "GP_Sloc:railway.adb:139:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 4)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 1)))) then (
     ( ( "GP_Sloc:railway.adb:141:35" (let temp___standard__railway_61 = (let temp___standard__railway_60 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__left((Railway__segment_state_type.__split_fields(temp___standard__railway_60)))))) end ;
      { ( temp___standard__railway_60 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_60)) ) with Railway__segment_state_type.rec__left = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_61)) )))
      );
     ( "GP_Sloc:railway.adb:142:41" (let temp___standard__railway_63 = (let temp___standard__railway_62 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_left((Railway__signal_state_type.__split_fields(temp___standard__railway_62)))))) end ;
      { ( temp___standard__railway_62 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_62)) ) with Railway__signal_state_type.rec__middle_left = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_63)) )))
      );
     ( "GP_Sloc:railway.adb:143:37" (let temp___standard__railway_65 = (let temp___standard__railway_64 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_64)))))) end ;
      { ( temp___standard__railway_64 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_64)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_65)) )))
      );
     ( "GP_Sloc:railway.adb:144:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:146:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 1)) then (
    ( "GP_Sloc:railway.adb:149:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 3)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 2)))) then (
     ( ( "GP_Sloc:railway.adb:151:36" (let temp___standard__railway_67 = (let temp___standard__railway_66 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_66)))))) end ;
      { ( temp___standard__railway_66 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_66)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_67)) )))
      );
     ( "GP_Sloc:railway.adb:152:37" (let temp___standard__railway_69 = (let temp___standard__railway_68 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_68)))))) end ;
      { ( temp___standard__railway_68 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_68)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_69)) )))
      );
     ( "GP_Sloc:railway.adb:153:42" (let temp___standard__railway_71 = (let temp___standard__railway_70 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__middle_right((Railway__signal_state_type.__split_fields(temp___standard__railway_70)))))) end ;
      { ( temp___standard__railway_70 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_70)) ) with Railway__signal_state_type.rec__middle_right = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_71)) )))
      );
     ( "GP_Sloc:railway.adb:154:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:156:23" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) ))  else if ((Railway__move_train__route.route = 2)) then (
    ( "GP_Sloc:railway.adb:159:13" (if ((Boolean.andb(((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 4)) (((Railway__one_segment_state.to_rep((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields })))))) = 1)))) then (
     ( ( "GP_Sloc:railway.adb:161:36" (let temp___standard__railway_73 = (let temp___standard__railway_72 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__middle((Railway__segment_state_type.__split_fields(temp___standard__railway_72)))))) end ;
      { ( temp___standard__railway_72 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_72)) ) with Railway__segment_state_type.rec__middle = (Railway__one_segment_state.of_rep(0)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_73)) )))
      );
     ( "GP_Sloc:railway.adb:162:36" (let temp___standard__railway_75 = (let temp___standard__railway_74 = { Railway__segment_state_type.__split_fields = !Railway__segment_state.segment_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__segment_state_type.rec__right((Railway__segment_state_type.__split_fields(temp___standard__railway_74)))))) end ;
      { ( temp___standard__railway_74 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___standard__railway_74)) ) with Railway__segment_state_type.rec__right = (Railway__one_segment_state.of_rep(5)) } } )))
      in (
      Railway__segment_state.segment_state__split_fields := ( (Railway__segment_state_type.__split_fields(temp___standard__railway_75)) )))
      );
     ( "GP_Sloc:railway.adb:163:42" (let temp___standard__railway_77 = (let temp___standard__railway_76 = { Railway__signal_state_type.__split_fields = !Railway__signal_state.signal_state__split_fields } in (
      ( abstract ensures {true}(Main.___ignore((Railway__signal_state_type.rec__right_middle((Railway__signal_state_type.__split_fields(temp___standard__railway_76)))))) end ;
      { ( temp___standard__railway_76 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___standard__railway_76)) ) with Railway__signal_state_type.rec__right_middle = (Railway__one_signal_state.of_rep(0)) } } )))
      in (
      Railway__signal_state.signal_state__split_fields := ( (Railway__signal_state_type.__split_fields(temp___standard__railway_77)) )))
      );
     ( "GP_Sloc:railway.adb:164:23" Railway__move_train__success.success := ( (Boolean.of_int(1)) ) ) )) else (
     ( "GP_Sloc:railway.adb:166:24" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) )) else (
    ( "GP_Sloc:railway.adb:169:20" Railway__move_train__success.success := ( (Boolean.of_int(0)) ) ))) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram railway.ads:76 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Railway__correct_signals__axiom.correct_signals(()))) ((Railway__correct_segments__axiom.correct_segments(())))))) end  ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "train" defined at railway.ads:85, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__train__subprogram_def
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__segment_state
 use        Railway__signal_state
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Railway__route_type
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments__axiom
 use        Railway__open_route__axiom
 use        Railway__move_train__axiom
 use        Railway__train__route
 use        Railway__train__retval
 use        Railway__one_signal_state__axiom
 use        Railway__route_type__axiom
 use        Railway__one_segment_state__axiom
 use        Railway__segment_state_type__axiom
 use        Railway__signal_state_type__axiom
 use        Railway__segment_state__axiom
 use        Railway__signal_state__axiom
 use        Railway__correct_signals__axiom
 use        Railway__correct_segments__axiom
 use        Railway__open_route__axiom
 use        Railway__move_train__axiom
 use        Railway__train__route__axiom
 use        Railway__train__retval__axiom

 let def "W:diverges:N" "GP_Subp:railway.ads:85" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( ( () (* Assume dynamic property of params of the subprogram railway.ads:85 *)
  ;
  assume { (Railway__route_type.dynamic_property Railway__route_type.first Railway__route_type.last Railway__train__route.route) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:85 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:85 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram railway.ads:85 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram railway.ads:85 *)
  ;
  () (* Body of the subprogram railway.ads:85 *)
  ;
  try
   ( ( "GP_Sloc:railway.adb:177:6" (if ((Boolean.andb((Railway__correct_segments__axiom.correct_segments(()))) ((Railway__correct_signals__axiom.correct_signals(()))))) then (
    ( ( "GP_Sloc:railway.adb:178:8" ( "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Id:2" "GP_Sloc:railway.adb:178:8" "comment:       Open_Route(Route, retval);
       ^ railway.adb:178:8:VC_PRECONDITION" "GP_Shape:if__call_open_route" (Railway__open_route__axiom.open_route(Railway__train__route.route) (Railway__train__retval.retval)) ) );
    ( "GP_Sloc:railway.adb:179:8" (if (((Boolean.to_int(!Railway__train__retval.retval)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
     ( "GP_Sloc:railway.adb:179:30" ( "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Id:3" "GP_Sloc:railway.adb:179:30" "comment:       if retval = True then Move_Train(Route, retval);
                             ^ railway.adb:179:30:VC_PRECONDITION" "GP_Shape:if__if__call_move_train" (Railway__move_train__axiom.move_train(Railway__train__route.route) (Railway__train__retval.retval)) ) )) else (
     ( "GP_Sloc:railway.adb:180:19" Railway__train__retval.retval := ( (Boolean.of_int(0)) ) ))) ) )) else (
    ())) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram railway.ads:85 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end  ) ) )
end
